package ru.prohor.universe.padawan.scripts.qr;

public class QRTables {
    private static final int[][] MAX_BITS_AVAILABLE = {
            {152, 128, 104, 72},
            {272, 224, 176, 128},
            {440, 352, 272, 208},
            {640, 512, 384, 288},
            {864, 688, 496, 368},
            {1088, 864, 608, 480},
            {1248, 992, 704, 528},
            {1552, 1232, 880, 688},
            {1856, 1456, 1056, 800},
            {2192, 1728, 1232, 976},
            {2592, 2032, 1440, 1120},
            {2960, 2320, 1648, 1264},
            {3424, 2672, 1952, 1440},
            {3688, 2920, 2088, 1576},
            {4184, 3320, 2360, 1784},
            {4712, 3624, 2600, 2024},
            {5176, 4056, 2936, 2264},
            {5768, 4504, 3176, 2504},
            {6360, 5016, 3560, 2728},
            {6888, 5352, 3880, 3080},
            {7456, 5712, 4096, 3248},
            {8048, 6256, 4544, 3536},
            {8752, 6880, 4912, 3712},
            {9392, 7312, 5312, 4112},
            {10208, 8000, 5744, 4304},
            {10960, 8496, 6032, 4768},
            {11744, 9024, 6464, 5024},
            {12248, 9544, 6968, 5288},
            {13048, 10136, 7288, 5608},
            {13880, 10984, 7880, 5960},
            {14744, 11640, 8264, 6344},
            {15640, 12328, 8920, 6760},
            {16568, 13048, 9368, 7208},
            {17528, 13800, 9848, 7688},
            {18448, 14496, 10288, 7888},
            {19472, 15312, 10832, 8432},
            {20528, 15936, 11408, 8768},
            {21616, 16816, 12016, 9136},
            {22496, 17728, 12656, 9776},
            {23648, 18672, 13328, 10208}
    };

    private static final int[][] BLOCKS_QUANTITY = {
            {1, 1, 1, 1},
            {1, 1, 1, 1},
            {1, 1, 2, 2},
            {1, 2, 2, 4},
            {1, 2, 4, 4},
            {2, 4, 4, 4},
            {2, 4, 6, 5},
            {2, 4, 6, 6},
            {2, 5, 8, 8},
            {4, 5, 8, 8},
            {4, 5, 8, 11},
            {4, 8, 10, 11},
            {4, 9, 12, 16},
            {4, 9, 16, 16},
            {6, 10, 12, 18},
            {6, 10, 17, 16},
            {6, 11, 16, 19},
            {6, 13, 18, 21},
            {7, 14, 21, 25},
            {8, 16, 20, 25},
            {8, 17, 23, 25},
            {9, 17, 23, 34},
            {9, 18, 25, 30},
            {10, 20, 27, 32},
            {12, 21, 29, 35},
            {12, 23, 34, 37},
            {12, 25, 34, 40},
            {13, 26, 35, 42},
            {14, 28, 38, 45},
            {15, 29, 40, 48},
            {16, 31, 43, 51},
            {17, 33, 45, 54},
            {18, 35, 48, 57},
            {19, 37, 51, 60},
            {19, 38, 53, 63},
            {20, 40, 56, 66},
            {21, 43, 59, 70},
            {22, 45, 62, 74},
            {24, 47, 65, 77},
            {25, 49, 68, 81}
    };

    private static final int[][] CORRECTION_BYTES_QUANTITY = {
            {7, 10, 13, 17},
            {10, 16, 22, 28},
            {15, 26, 18, 22},
            {20, 18, 26, 16},
            {26, 24, 18, 22},
            {18, 16, 24, 28},
            {20, 18, 18, 26},
            {24, 22, 22, 26},
            {30, 22, 20, 24},
            {18, 26, 24, 28},
            {20, 30, 28, 24},
            {24, 22, 26, 28},
            {26, 22, 24, 22},
            {30, 24, 20, 24},
            {22, 24, 30, 24},
            {24, 28, 24, 30},
            {28, 28, 28, 28},
            {30, 26, 28, 28},
            {28, 26, 26, 26},
            {28, 26, 30, 28},
            {28, 26, 28, 30},
            {28, 28, 30, 24},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {26, 28, 30, 30},
            {28, 28, 28, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30},
            {30, 28, 30, 30}
    };

    private static final int[][] GENERATING_POLYNOMIALS = {
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {87, 229, 146, 149, 238, 102, 21},
            {},
            {},
            {251, 67, 46, 61, 118, 70, 64, 94, 32, 45},
            {},
            {},
            {74, 152, 176, 100, 86, 100, 106, 104, 130, 218, 206, 140, 78},
            {},
            {8, 183, 61, 91, 202, 37, 51, 58, 58, 237, 140, 124, 5, 99, 105},
            {120, 104, 107, 109, 102, 161, 76, 3, 91, 191, 147, 169, 182, 194, 225, 120},
            {43, 139, 206, 78, 43, 239, 123, 206, 214, 147, 24, 99, 150, 39, 243, 163, 136},
            {215, 234, 158, 94, 184, 97, 118, 170, 79, 187, 152, 148, 252, 179, 5, 98, 96, 153},
            {},
            {17, 60, 79, 50, 61, 163, 26, 187, 202, 180, 221, 225, 83, 239, 156, 164, 212, 212, 188, 190},
            {},
            {210, 171, 247, 242, 93, 230, 14, 109, 221, 53, 200, 74, 8, 172, 98, 80, 219, 134, 160, 105, 165, 231},
            {},
            {229, 121, 135, 48, 211, 117, 251, 126, 159, 180, 169, 152, 192, 226, 228, 218, 111, 0, 117, 232, 87, 96, 227, 21},
            {},
            {173, 125, 158, 2, 103, 182, 118, 17, 145, 201, 111, 28, 165, 53, 161, 21, 245, 142, 13, 102, 48, 227, 153, 145, 218, 70},
            {},
            {168, 223, 200, 104, 224, 234, 108, 180, 110, 190, 195, 147, 205, 27, 232, 201, 21, 43, 245, 87, 42, 195, 212, 119, 242, 37, 9, 123},
            {},
            {41, 173, 145, 152, 216, 31, 179, 182, 50, 48, 110, 86, 239, 96, 222, 125, 42, 173, 226, 193, 224, 130, 156, 37, 251, 216, 238, 40, 192, 180}
    };

    /**
     * <h5>Code for Galois Field generation</h5>
     * <pre>
     * {@code
     * private static int[][] generateGaloisField() {
     *     int[] GaloisField = new int[256];
     *     int[] inverseGaloisField = new int[256];
     *     for (int exponent = 1, value = 1; exponent < 256; exponent++) {
     *         value = value > 127 ? ((value << 1) ^ 285) : value << 1;
     *         inverseGaloisField[value] = exponent % 255;
     *         GaloisField[exponent] = value;
     *     }
     *     GaloisField[0] = 1;
     *     return new int[][]{GaloisField, inverseGaloisField};
     * }
     * }
     * </pre>
     */
    private static final int[] GALOIS_FIELD = {
            1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38,
            76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192,
            157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35,
            70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161,
            95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240,
            253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226,
            217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206,
            129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204,
            133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84,
            168, 77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115,
            230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255,
            227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65,
            130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166,
            81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9,
            18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22,
            44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1,
    };

    private static final int[] INVERSE_GALOIS_FIELD = {
            0, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75,
            4, 100, 224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113,
            5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69,
            29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166,
            6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136,
            54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64,
            30, 66, 182, 163, 195, 72, 126, 110, 107, 58, 40, 84, 250, 133, 186, 61,
            202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167, 87,
            7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24,
            227, 165, 153, 119, 38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46,
            55, 63, 209, 91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97,
            242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162,
            31, 45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246,
            108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90,
            203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215,
            79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80, 88, 175,
    };

    private static final int[][] MASK_CODES = {
            {0b111011111000100, 0b101010000010010, 0b011010101011111, 0b001011010001001},
            {0b111001011110011, 0b101000100100101, 0b011000001101000, 0b001001110111110},
            {0b111110110101010, 0b101111001111100, 0b011111100110001, 0b001110011100111},
            {0b111100010011101, 0b101101101001011, 0b011101000000110, 0b001100111010000},
            {0b110011000101111, 0b100010111111001, 0b010010010110100, 0b000011101100010},
            {0b110001100011000, 0b100000011001110, 0b010000110000011, 0b000001001010101},
            {0b110110001000001, 0b100111110010111, 0b010111011011010, 0b000110100001100},
            {0b110100101110110, 0b100101010100000, 0b010101111101101, 0b000100000111011}
    };

    private static final int[][] ALIGNMENT_PATTERNS = {
            {},
            {18},
            {22},
            {26},
            {30},
            {34},
            {6, 22, 38},
            {6, 24, 42},
            {6, 26, 46},
            {6, 28, 50},
            {6, 30, 54},
            {6, 32, 58},
            {6, 34, 62},
            {6, 26, 46, 66},
            {6, 26, 48, 70},
            {6, 26, 50, 74},
            {6, 30, 54, 78},
            {6, 30, 56, 82},
            {6, 30, 58, 86},
            {6, 34, 62, 90},
            {6, 28, 50, 72, 94},
            {6, 26, 50, 74, 98},
            {6, 30, 54, 78, 102},
            {6, 28, 54, 80, 106},
            {6, 32, 58, 84, 110},
            {6, 30, 58, 86, 114},
            {6, 34, 62, 90, 118},
            {6, 26, 50, 74, 98, 122},
            {6, 30, 54, 78, 102, 126},
            {6, 26, 52, 78, 104, 130},
            {6, 30, 56, 82, 108, 134},
            {6, 34, 60, 86, 112, 138},
            {6, 30, 58, 86, 114, 142},
            {6, 34, 62, 90, 118, 146},
            {6, 30, 54, 78, 102, 126, 150},
            {6, 24, 50, 76, 102, 128, 154},
            {6, 28, 54, 80, 106, 132, 158},
            {6, 32, 58, 84, 110, 136, 162},
            {6, 26, 54, 82, 110, 138, 166},
            {6, 30, 58, 86, 114, 142, 170}
    };

    private static final int[][] VERSION_CODES = {
            {0b000010, 0b011110, 0b100110},
            {0b010001, 0b011100, 0b111000},
            {0b110111, 0b011000, 0b000100},
            {0b101001, 0b111110, 0b000000},
            {0b001111, 0b111010, 0b111100},
            {0b001101, 0b100100, 0b011010},
            {0b101011, 0b100000, 0b100110},
            {0b110101, 0b000110, 0b100010},
            {0b010011, 0b000010, 0b011110},
            {0b011100, 0b010001, 0b011100},
            {0b111010, 0b010101, 0b100000},
            {0b100100, 0b110011, 0b100100},
            {0b000010, 0b110111, 0b011000},
            {0b000000, 0b101001, 0b111110},
            {0b100110, 0b101101, 0b000010},
            {0b111000, 0b001011, 0b000110},
            {0b011110, 0b001111, 0b111010},
            {0b001101, 0b001101, 0b100100},
            {0b101011, 0b001001, 0b011000},
            {0b110101, 0b101111, 0b011100},
            {0b010011, 0b101011, 0b100000},
            {0b010001, 0b110101, 0b000110},
            {0b110111, 0b110001, 0b111010},
            {0b101001, 0b010111, 0b111110},
            {0b001111, 0b010011, 0b000010},
            {0b101000, 0b011000, 0b101101},
            {0b001110, 0b011100, 0b010001},
            {0b010000, 0b111010, 0b010101},
            {0b110110, 0b111110, 0b101001},
            {0b110100, 0b100000, 0b001111},
            {0b010010, 0b100100, 0b110011},
            {0b001100, 0b000010, 0b110111},
            {0b101010, 0b000110, 0b001011},
            {0b111001, 0b000100, 0b010101}
    };

    static int[] getVersionCodes(int version) {
        return VERSION_CODES[version - 7];
    }

    static int[] getAlignmentPatterns(int version) {
        return ALIGNMENT_PATTERNS[version - 1];
    }

    static int getMaskCode(int mask, QRCorrectionLevel level) {
        return MASK_CODES[mask][level.index];
    }

    static int getFromInverseGaloisField(int index) {
        return INVERSE_GALOIS_FIELD[index];
    }

    static int getFromGaloisField(int index) {
        return GALOIS_FIELD[index];
    }

    static int[] getGeneratingPolynomial(int correctionBytesQuantity) {
        return GENERATING_POLYNOMIALS[correctionBytesQuantity];
    }

    static int getCorrectionBytesQuantity(int version, QRCorrectionLevel level) {
        return CORRECTION_BYTES_QUANTITY[version - 1][level.index];
    }

    static int getMaxBitsAvailable(int version, QRCorrectionLevel level) {
        return MAX_BITS_AVAILABLE[version - 1][level.index];
    }

    static int getBlocksQuantity(int version, QRCorrectionLevel level) {
        return BLOCKS_QUANTITY[version - 1][level.index];
    }

    static int getLengthOfTheDataQuantityField(int version, QRDataType type) {
        switch (type) {
            case DIGITS -> {
                if (version <= 9)
                    return 10;
                if (version <= 26)
                    return 12;
                return 14;
            }
            case CHARACTERS -> {
                if (version <= 9)
                    return 9;
                if (version <= 26)
                    return 11;
                return 13;
            }
            case BYTES -> {
                if (version <= 9)
                    return 8;
                if (version <= 26)
                    return 16;
                return 16;
            }
        }
        throw new IllegalArgumentException();
    }

    static int getOptimalVersion(int bitsCount, QRCorrectionLevel level, QRDataType type) {
        if (bitsCount < 1)
            throw new IllegalArgumentException("bits count must be greater than 0");
        for (int i = 1; i <= 40; ++i) {
            if (4 + getLengthOfTheDataQuantityField(i, type) + bitsCount <= getMaxBitsAvailable(i, level))
                return i;
        }
        throw new IllegalArgumentException("bitCount is too long");
    }
}
